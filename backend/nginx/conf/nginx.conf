user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;

    # Upstream servers
    upstream inference_backend {
        server host.docker.internal:8080;
    }
    
    upstream embeddings_backend {
        server host.docker.internal:8001;
    }

    # HTTP server - health checks only, redirect everything else
    server {
        listen 80;
        server_name inference.geist.im;

        # Health check endpoint - allow HTTP for monitoring
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"inference","ssl_enabled":false,"ssl_status":"HTTP health check"}\n';
            add_header Content-Type application/json;
        }


        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }


    # HTTPS server for inference.geist.im (enabled when SSL certificates are present)
    server {
        listen 443 ssl;
        http2 on;
        server_name inference.geist.im;

        # SSL configuration
        ssl_certificate /app/certificates/cert.pem;
        ssl_certificate_key /app/certificates/key.pem;
        
        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"inference","ssl_enabled":true,"ssl_status":"SSL enabled"}\n';
            add_header Content-Type application/json;
        }

        # SSL info endpoint
        location /ssl/info {
            access_log off;
            return 200 '{"ssl_enabled":true,"ssl_valid":true,"ssl_status":"SSL configuration valid","service":"inference"}\n';
            add_header Content-Type application/json;
        }


        # Proxy all other requests to inference service
        location / {
            proxy_pass http://inference_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle streaming responses
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # Handle Server-Sent Events
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
        }
    }

    # HTTP server for embeddings.geist.im - health checks only, redirect everything else
    server {
        listen 80;
        server_name embeddings.geist.im;

        # Health check endpoint - allow HTTP for monitoring
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"embeddings","ssl_enabled":false,"ssl_status":"HTTP health check"}\n';
            add_header Content-Type application/json;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server for embeddings.geist.im (enabled when SSL certificates are present)
    server {
        listen 443 ssl;
        http2 on;
        server_name embeddings.geist.im;

        # SSL configuration
        ssl_certificate /app/certificates/cert.pem;
        ssl_certificate_key /app/certificates/key.pem;
        
        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"embeddings","ssl_enabled":true,"ssl_status":"SSL enabled"}\n';
            add_header Content-Type application/json;
        }

        # SSL info endpoint
        location /ssl/info {
            access_log off;
            return 200 '{"ssl_enabled":true,"ssl_valid":true,"ssl_status":"SSL configuration valid","service":"embeddings"}\n';
            add_header Content-Type application/json;
        }

        # Proxy all requests to embeddings service
        location / {
            proxy_pass http://embeddings_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle streaming responses
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # Handle Server-Sent Events
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
        }
    }

}
