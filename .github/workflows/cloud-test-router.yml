name: Test Router Services

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-router:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/router/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      working-directory: ./backend/router
      run: |
        python -m pip install --upgrade pip
        pip install fastapi httpx uvicorn sse-starlette python-multipart python-dotenv
        pip install pytest pytest-asyncio
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        INFERENCE_URL=https://inference.geist.im
        EMBEDDINGS_URL=https://embeddings.geist.im
        HARMONY_ENABLED=false
        LOG_LEVEL=INFO
        EOF
    - name: Start router service
      working-directory: ./backend/router
      run: |
        python main.py > router.log 2>&1 &
        echo $! > router.pid
        sleep 10
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INFERENCE_URL: https://inference.geist.im
        EMBEDDINGS_URL: https://embeddings.geist.im
        LOG_LEVEL: INFO

    - name: Wait for router to be ready
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    - name: Run streaming tests
      working-directory: ./backend/router
      run: |
        echo "=== Starting streaming tests ==="
        timeout 120 python test_streaming.py
        echo "=== Streaming tests completed ==="
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INFERENCE_URL: https://inference.geist.im
        EMBEDDINGS_URL: https://embeddings.geist.im

    - name: Run health check tests
      working-directory: ./backend/router
      run: |
        python test_health_endpoint.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INFERENCE_URL: https://inference.geist.im
        EMBEDDINGS_URL: https://embeddings.geist.im

    - name: Save router logs
      if: always()
      working-directory: ./backend/router
      run: |
        echo "=== Router Logs ==="
        cat router.log || echo "No router.log found"
        echo "=== End Router Logs ==="
    - name: Cleanup
      if: always()
      working-directory: ./backend/router
      run: |
        if [ -f router.pid ]; then
          kill $(cat router.pid) 2>/dev/null || true
          rm -f router.pid
        fi
        pkill -f "python main.py" || true